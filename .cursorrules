# Lineup Builder Development Rules

## Stack

React 19 + TypeScript, Zustand, Tailwind CSS 4, Radix UI, Vite

## Code Standards

- Strict TypeScript with explicit types
- Functional components only, PascalCase naming
- Use `type` over `interface`, `satisfies` for validation
- Max 300 lines per component; extract complex logic
- Path aliases: @/, @/lib/_, @/components/_, @/features/_, @/hooks/_, @/store/_, @/types/_

## File Structure

- Components: src/components/ (ui/ for Radix/shadcn)
- Features: src/features/ (feature-scoped components)
- State: src/store/ (Zustand)
- Hooks: src/hooks/
- Utils: src/lib/utils/
- Types: src/lib/types/
- Constants: src/lib/constants/

## Styling

- Tailwind utility classes only, no custom CSS
- Dark mode: dark: prefix (class strategy enabled)
- Custom colors: navy, gold, neutral from tailwind.config.ts
- Responsive: mobile-first with md:, lg: breakpoints
- Use cn() utility for conditional classes

## Zustand Patterns

- persist() middleware for storage
- Compute derived state in store (activeLineup, uniqueCount)
- Return Partial<State> types
- Immutable updates: JSON.parse(JSON.stringify(...))
- Group: state, setters, operations, lineup management, modals, DnD

## Naming

- Variables: camelCase
- Constants: UPPER_SNAKE_CASE
- Types: PascalCase
- Components: PascalCase.tsx
- Utils: camelCase.ts

## Performance

- React.memo() for unchanged prop components
- useCallback for event handlers
- Stable keys in lists
- Lazy load large components

## Domain

- Max 6 unique athletes across lineup
- Each event holds 4 athletes
- Metrics: D-Score, Consistency, Average Score
- Specialization: athletes have event-specific data

## Git

Conventional commits: feat:, fix:, refactor:, docs:, chore:

## ESLint

Run `pnpm lint` - fix all warnings before commit
